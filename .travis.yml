language: cpp

matrix:
  include:
    - os: linux
      dist: focal
      compiler: gcc
      env:
        - H5GEO_SUPERBUILD=False
        - H5GEO_USE_THREADS=True
        - H5GEO_BUILD_SHARED_LIBS=True
        - H5GEO_BUILD_TESTS=True
        - H5GEO_BUILD_h5geopy=True
        - HDF5_RUNTIME_DIR=""
        - COPY_H5GEOPY_RUNTIME_DEPS=False
        - CMAKE_GENERATOR="Ninja"
        - TESTS_TARGET="test"
        - PYTEST_COMMAND="python -m unittest discover h5geopy.tests"
      addons:
        apt:
          packages:
            - libhdf5-dev
            - ninja-build
            - libtbb-dev

    - os: linux
      dist: focal
      compiler: clang
      env:
        - H5GEO_SUPERBUILD=False
        - H5GEO_USE_THREADS=True
        - H5GEO_BUILD_SHARED_LIBS=True
        - H5GEO_BUILD_TESTS=True
        - H5GEO_BUILD_h5geopy=True
        - HDF5_RUNTIME_DIR=""
        - COPY_H5GEOPY_RUNTIME_DEPS=True
        - CMAKE_GENERATOR="Ninja"
        - TESTS_TARGET="test"
        - PYTEST_COMMAND="python -m unittest discover h5geopy.tests"
      addons:
        apt:
          packages:
            - libhdf5-dev
            - ninja-build
            - libtbb-dev

    - os: linux
      dist: focal
      compiler: clang
      env:
        - H5GEO_SUPERBUILD=False
        - H5GEO_USE_THREADS=False
        - H5GEO_BUILD_SHARED_LIBS=True
        - H5GEO_BUILD_TESTS=True
        - H5GEO_BUILD_h5geopy=True
        - HDF5_RUNTIME_DIR=""
        - COPY_H5GEOPY_RUNTIME_DEPS=True
        - CMAKE_GENERATOR="Ninja"
        - TESTS_TARGET="test"
        - PYTEST_COMMAND="python -m unittest discover h5geopy.tests"
      addons:
        apt:
          packages:
            - libhdf5-dev
            - ninja-build

    - os: windows
      env:
        - H5GEO_SUPERBUILD=True
        - H5GEO_USE_THREADS=True
        - H5GEO_BUILD_SHARED_LIBS=True
        - H5GEO_BUILD_TESTS=True
        - H5GEO_BUILD_h5geopy=True
        - HDF5_RUNTIME_DIR="C:/Tools/miniconda3/Library/bin"
        - COPY_H5GEOPY_RUNTIME_DEPS=True
        - CMAKE_GENERATOR="Visual Studio 15 2017 Win64"
        - TESTS_TARGET="RUN_TESTS"
        - PYTEST_COMMAND="python -m unittest discover h5geopy.tests"

    - os: windows
      env:
        - H5GEO_SUPERBUILD=True
        - H5GEO_USE_THREADS=True
        - H5GEO_BUILD_SHARED_LIBS=True
        - H5GEO_BUILD_TESTS=True
        - H5GEO_BUILD_h5geopy=True
        - HDF5_RUNTIME_DIR="C:/Tools/miniconda3/Library/bin"
        - COPY_H5GEOPY_RUNTIME_DEPS=False
        - CMAKE_GENERATOR="Visual Studio 15 2017 Win64"
        - TESTS_TARGET="RUN_TESTS"
        - PYTEST_COMMAND="python -m unittest discover h5geopy.tests"

    - os: osx
      osx_image: xcode12.2
      compiler: clang
      env:
        - H5GEO_SUPERBUILD=False
        - H5GEO_USE_THREADS=False
        - H5GEO_BUILD_SHARED_LIBS=True
        - H5GEO_BUILD_TESTS=True
        - H5GEO_BUILD_h5geopy=True
        - HDF5_RUNTIME_DIR=""
        - COPY_H5GEOPY_RUNTIME_DEPS=True
        - CMAKE_GENERATOR="Ninja"
        - TESTS_TARGET="test"
        - PYTEST_COMMAND=""

env:
  global:
  - EIGEN3_ROOT=${TRAVIS_BUILD_DIR}/../eigen
  - magic_enum_ROOT=${TRAVIS_BUILD_DIR}/../magic_enum
  - h5gt_ROOT=${TRAVIS_BUILD_DIR}/../h5gt
  - units_ROOT=${TRAVIS_BUILD_DIR}/../units
  - units_DIR=${units_ROOT}/install/lib/cmake/units
  - CMAKE_INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/../install

before_install:
  - git clone --branch v0.4.0 https://github.com/LLNL/units.git $units_ROOT;
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then 
      git clone --branch 3.4.0-rc1 https://gitlab.com/libeigen/eigen.git $EIGEN3_ROOT;
      export PATH=$EIGEN3_ROOT:$PATH;
      git clone --branch v0.7.2 https://github.com/Neargye/magic_enum.git $magic_enum_ROOT;
      export PATH=$magic_enum_ROOT:$PATH;
      git clone --branch main https://github.com/Dimspot/h5gt.git $h5gt_ROOT;
      export PATH=$h5gt_ROOT:$PATH;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
      git clone --branch 3.4.0-rc1 https://gitlab.com/libeigen/eigen.git $EIGEN3_ROOT;
      export PATH=$EIGEN3_ROOT:$PATH;
      git clone --branch v0.7.2 https://github.com/Neargye/magic_enum.git $magic_enum_ROOT;
      export PATH=$magic_enum_ROOT:$PATH;
      git clone --branch main https://github.com/Dimspot/h5gt.git $h5gt_ROOT;
      export PATH=$h5gt_ROOT:$PATH;
      wget "http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      source $HOME/miniconda/bin/activate;
      hash -r;
      conda config --set always_yes yes --set changeps1 no;
      conda update -q conda;
      conda install -c conda-forge mamba;
      mamba install -c conda-forge tbb zlib hdf5 ninja;
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then 
      choco install --yes miniconda3;
      source C:/Tools/miniconda3/Scripts/activate;
      conda config --set always_yes yes --set changeps1 no;
      conda update -q conda;
      echo $PATH;
      export PATH=$PATH:$CMAKE_INSTALL_PREFIX/zlib-install/bin;
      export PATH=$PATH:$CMAKE_INSTALL_PREFIX/hdf5-install/bin;
      export PATH=$PATH:$TRAVIS_BUILD_DIR/build/Debug;
      export PATH=$PATH:$TRAVIS_BUILD_DIR/build/Release;
    fi

before_script:
  - if [[ "$TRAVIS_COMPILER" == "gcc" ]]; then 
      gcc --version;
    elif [[ "$TRAVIS_COMPILER" == "clang" ]]; then 
      clang --version;
    fi
  - cmake --version
  - python --version
  - mkdir ${TRAVIS_BUILD_DIR}/../install
  - mkdir ${units_ROOT}/build
  - mkdir ${units_ROOT}/install
  - cd ${units_ROOT}/build
  - cmake .. -DUNITS_BUILD_FUZZ_TARGETS=OFF -DUNITS_BUILD_SHARED_LIBRARY=OFF -DUNITS_BUILD_STATIC_LIBRARY=ON -DUNITS_ENABLE_TESTS=OFF -DUNITS_HEADER_ONLY=OFF -DCMAKE_BUILD_TYPE=Release
  - cmake --build . --config Release
  - cmake --install . --config Release --prefix ${units_ROOT}/install

script:
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir -p build && pushd build
  - >
    cmake --warn-uninitialized --debug-output
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    -DEigen3_ROOT:PATH=$EIGEN3_ROOT 
    -Dmagic_enum_ROOT:PATH=$magic_enum_ROOT 
    -Dh5gt_ROOT:PATH=$h5gt_ROOT
    -Dunits_DIR=$h5gt_DIR
    -DH5GEO_SUPERBUILD:BOOL=${H5GEO_SUPERBUILD}
    -DH5GEO_USE_THREADS:BOOL=${H5GEO_USE_THREADS}
    -DH5GEO_BUILD_SHARED_LIBS:BOOL=${H5GEO_BUILD_SHARED_LIBS}
    -DH5GEO_BUILD_h5geopy:BOOL=${H5GEO_BUILD_h5geopy}
    -DHDF5_RUNTIME_DIR:PATH=${HDF5_RUNTIME_DIR}
    -DCOPY_H5GEOPY_RUNTIME_DEPS:BOOL=${COPY_H5GEOPY_RUNTIME_DEPS}
    -DH5GEO_BUILD_TESTS:BOOL=${H5GEO_BUILD_TESTS}
    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
    -G "${CMAKE_GENERATOR}" ../
  - cmake --build . --config Release
  - CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target ${TESTS_TARGET}
  - cmake --install . --prefix ../install
  - ${PYTEST_COMMAND}
  # - popd
  # - bash tests/test_project_integration.sh;